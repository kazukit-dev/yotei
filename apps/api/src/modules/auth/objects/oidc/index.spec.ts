// Generated by Copilot
import { describe, expect, it } from "vitest";

import {
  createOauth2Code,
  createOauth2CodeVerifier,
  type Oauth2Code,
  type Oauth2CodeVerifier,
} from "./index";

describe("OIDC Objects", () => {
  describe("createOauth2Code", () => {
    it("should create a valid OAuth2 code when provided with a non-empty string", () => {
      const code = "valid_oauth2_code_123";
      const result = createOauth2Code(code);

      expect(result.isOk()).toBeTruthy();
      const oauth2Code = result._unsafeUnwrap() as Oauth2Code;
      expect(oauth2Code).toBe(code);
    });

    it("should reject an empty string", () => {
      const code = "";
      const result = createOauth2Code(code);

      expect(result.isErr()).toBeTruthy();
      const error = result._unsafeUnwrapErr();
      expect(error).toBe("InvalidOauth2Code");
    });

    it("should create a valid OAuth2 code with a very long string", () => {
      const code = "a".repeat(1000);
      const result = createOauth2Code(code);

      expect(result.isOk()).toBeTruthy();
      const oauth2Code = result._unsafeUnwrap() as Oauth2Code;
      expect(oauth2Code).toBe(code);
    });
  });

  describe("createOauth2CodeVerifier", () => {
    it("should create a valid OAuth2 code verifier with minimum length", () => {
      const codeVerifier = "a".repeat(43);
      const result = createOauth2CodeVerifier(codeVerifier);

      expect(result.isOk()).toBeTruthy();
      const oauth2CodeVerifier = result._unsafeUnwrap() as Oauth2CodeVerifier;
      expect(oauth2CodeVerifier).toBe(codeVerifier);
    });

    it("should create a valid OAuth2 code verifier with maximum length", () => {
      const codeVerifier = "a".repeat(128);
      const result = createOauth2CodeVerifier(codeVerifier);

      expect(result.isOk()).toBeTruthy();
      const oauth2CodeVerifier = result._unsafeUnwrap() as Oauth2CodeVerifier;
      expect(oauth2CodeVerifier).toBe(codeVerifier);
    });

    it("should create a valid OAuth2 code verifier with mid-range length", () => {
      const codeVerifier = "a".repeat(85);
      const result = createOauth2CodeVerifier(codeVerifier);

      expect(result.isOk()).toBeTruthy();
      const oauth2CodeVerifier = result._unsafeUnwrap() as Oauth2CodeVerifier;
      expect(oauth2CodeVerifier).toBe(codeVerifier);
    });

    it("should reject a code verifier that is too short", () => {
      const codeVerifier = "a".repeat(42);
      const result = createOauth2CodeVerifier(codeVerifier);

      expect(result.isErr()).toBeTruthy();
      const error = result._unsafeUnwrapErr();
      expect(error).toBe("InvalidOauth2CodeVerifier");
    });

    it("should reject a code verifier that is too long", () => {
      const codeVerifier = "a".repeat(129);
      const result = createOauth2CodeVerifier(codeVerifier);

      expect(result.isErr()).toBeTruthy();
      const error = result._unsafeUnwrapErr();
      expect(error).toBe("InvalidOauth2CodeVerifier");
    });

    it("should reject an empty string", () => {
      const codeVerifier = "";
      const result = createOauth2CodeVerifier(codeVerifier);

      expect(result.isErr()).toBeTruthy();
      const error = result._unsafeUnwrapErr();
      expect(error).toBe("InvalidOauth2CodeVerifier");
    });
  });
});
