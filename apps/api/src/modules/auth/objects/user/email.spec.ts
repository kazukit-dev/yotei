import { describe, expect, test } from "vitest";

import { createEmail } from "./email";

// Generated by Copilot

describe("createEmail", () => {
  test("should create valid email", () => {
    const result = createEmail("user@example.com");

    expect(result._unsafeUnwrap()).toBe("user@example.com");
  });

  test("should reject invalid email format", () => {
    const result = createEmail("invalid-email");

    expect(result._unsafeUnwrapErr()).toBe("Invalid email.");
  });

  test("should reject empty string", () => {
    const result = createEmail("");

    expect(result._unsafeUnwrapErr()).toBe("Invalid email.");
  });

  test("should reject email without domain", () => {
    const result = createEmail("user@");

    expect(result._unsafeUnwrapErr()).toBe("Invalid email.");
  });

  test("should reject email without username", () => {
    const result = createEmail("@example.com");

    expect(result._unsafeUnwrapErr()).toBe("Invalid email.");
  });

  test("should accept email with subdomain", () => {
    const result = createEmail("user@mail.example.com");

    expect(result._unsafeUnwrap()).toBe("user@mail.example.com");
  });

  test("should accept email with plus sign", () => {
    const result = createEmail("user+tag@example.com");

    expect(result._unsafeUnwrap()).toBe("user+tag@example.com");
  });

  test("should accept email with dots in username", () => {
    const result = createEmail("first.last@example.com");

    expect(result._unsafeUnwrap()).toBe("first.last@example.com");
  });

  test("should accept email with numbers", () => {
    const result = createEmail("user123@example123.com");

    expect(result._unsafeUnwrap()).toBe("user123@example123.com");
  });

  test("should reject email with spaces", () => {
    const result = createEmail("user @example.com");

    expect(result._unsafeUnwrapErr()).toBe("Invalid email.");
  });

  test("should reject email without TLD", () => {
    const result = createEmail("user@domain");

    expect(result._unsafeUnwrapErr()).toBe("Invalid email.");
  });
});
