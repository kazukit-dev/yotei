import { describe, expect, test } from "vitest";

import { createSession, isSessionValid } from "./session";

// Generated by Copilot

describe("createSession", () => {
  test("should create valid session", () => {
    const sessionData = {
      id: "session-123",
      expiresAt: new Date("2025-01-01T10:00:00Z"),
      userId: "user-123",
    };

    const result = createSession(sessionData);

    const session = result._unsafeUnwrap();
    expect(session.id).toBe("session-123");
    expect(session.expires_at).toBe(sessionData.expiresAt);
    expect(session.user_id).toBe("user-123");
  });

  test("should reject invalid session data", () => {
    const sessionData = {
      id: "",
      expiresAt: new Date("2025-01-01T10:00:00Z"),
      userId: "",
    };

    const result = createSession(sessionData);

    const errors = result._unsafeUnwrapErr();
    expect(errors).toHaveLength(2);
    expect(errors).toContain("InvalidSessionId");
    expect(errors).toContain("InvalidUserId");
  });
});

describe("isSessionValid", () => {
  test("should validate non-expired session", () => {
    const futureDate = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours from now
    const sessionData = {
      id: "session-123",
      expiresAt: futureDate,
      userId: "user-123",
    };

    const session = createSession(sessionData)._unsafeUnwrap();
    const result = isSessionValid(session);

    expect(result.isOk()).toBeTruthy();
  });

  test("should reject expired session", () => {
    const pastDate = new Date(Date.now() - 24 * 60 * 60 * 1000); // 24 hours ago
    const sessionData = {
      id: "session-123",
      expiresAt: pastDate,
      userId: "user-123",
    };

    const session = createSession(sessionData)._unsafeUnwrap();
    const result = isSessionValid(session);

    expect(result.isErr()).toBeTruthy();
    expect(result._unsafeUnwrapErr()).toBe("Session has expired");
  });

  test("should handle session expiring exactly now", () => {
    const now = new Date();
    const sessionData = {
      id: "session-123",
      expiresAt: now,
      userId: "user-123",
    };

    const session = createSession(sessionData)._unsafeUnwrap();
    const result = isSessionValid(session);

    // Session expiring exactly now should NOT be considered expired (same timestamp)
    expect(result.isOk()).toBeTruthy();
  });
});
