// Generated by Claude
import { describe, expect, test } from "vitest";

import { ValidationError } from "../../../shared/errors";
import { createEventWorkflow, toUnvalidatedEvent } from "./create-event";

describe("createEventWorkflow", () => {
  describe("single event creation", () => {
    test("should create valid single event", () => {
      const input = toUnvalidatedEvent({
        calendar_id: "cal-123",
        title: "Team Meeting",
        start: "2024-06-26T10:00:00Z",
        end: "2024-06-26T11:00:00Z",
        is_recurring: false,
        is_all_day: false,
      });

      const result = createEventWorkflow()(input);

      expect(result.isOk()).toBe(true);
      const event = result._unsafeUnwrap();
      expect(event).toHaveProperty("kind", "created");
      expect(event).toHaveProperty("title", "Team Meeting");
      expect(event).toHaveProperty("is_recurring", false);
      expect(event).toHaveProperty("is_all_day", false);
      expect(event).toHaveProperty("id");
      expect(typeof event.id).toBe("string");
    });

    test("should create valid all-day single event", () => {
      const input = toUnvalidatedEvent({
        calendar_id: "cal-123",
        title: "Holiday",
        start: "2024-06-26T00:00:00Z",
        end: "2024-06-26T23:59:59Z",
        is_recurring: false,
        is_all_day: true,
      });

      const result = createEventWorkflow()(input);

      expect(result.isOk()).toBe(true);
      const event = result._unsafeUnwrap();
      expect(event).toHaveProperty("kind", "created");
      expect(event).toHaveProperty("title", "Holiday");
      expect(event).toHaveProperty("is_all_day", true);
    });

    test("should reject invalid calendar_id", () => {
      const input = toUnvalidatedEvent({
        calendar_id: "",
        title: "Test Event",
        start: "2024-06-26T10:00:00Z",
        end: "2024-06-26T11:00:00Z",
        is_recurring: false,
        is_all_day: false,
      });

      const result = createEventWorkflow()(input);

      expect(result.isErr()).toBe(true);
      const error = result._unsafeUnwrapErr();
      expect(error).toBeInstanceOf(ValidationError);
    });

    test("should reject invalid title", () => {
      const input = toUnvalidatedEvent({
        calendar_id: "cal-123",
        title: "",
        start: "2024-06-26T10:00:00Z",
        end: "2024-06-26T11:00:00Z",
        is_recurring: false,
        is_all_day: false,
      });

      const result = createEventWorkflow()(input);

      expect(result.isErr()).toBe(true);
      const error = result._unsafeUnwrapErr();
      expect(error).toBeInstanceOf(ValidationError);
    });

    test("should reject invalid start date", () => {
      const input = toUnvalidatedEvent({
        calendar_id: "cal-123",
        title: "Test Event",
        start: "invalid-date",
        end: "2024-06-26T11:00:00Z",
        is_recurring: false,
        is_all_day: false,
      });

      const result = createEventWorkflow()(input);

      expect(result.isErr()).toBe(true);
      const error = result._unsafeUnwrapErr();
      expect(error).toBeInstanceOf(ValidationError);
    });

    test("should reject invalid end date", () => {
      const input = toUnvalidatedEvent({
        calendar_id: "cal-123",
        title: "Test Event",
        start: "2024-06-26T10:00:00Z",
        end: "invalid-date",
        is_recurring: false,
        is_all_day: false,
      });

      const result = createEventWorkflow()(input);

      expect(result.isErr()).toBe(true);
      const error = result._unsafeUnwrapErr();
      expect(error).toBeInstanceOf(ValidationError);
    });
  });

  describe("recurring event creation", () => {
    test("should create valid recurring event", () => {
      const input = toUnvalidatedEvent({
        calendar_id: "cal-123",
        title: "Weekly Meeting",
        start: "2024-06-26T10:00:00Z",
        end: "2024-06-26T11:00:00Z",
        is_recurring: true,
        is_all_day: false,
        rrule: {
          freq: 2, // Weekly
          until: "2024-12-31T23:59:59Z",
        },
      });

      const result = createEventWorkflow()(input);

      expect(result.isOk()).toBe(true);
      const event = result._unsafeUnwrap();
      expect(event).toHaveProperty("kind", "created");
      expect(event).toHaveProperty("title", "Weekly Meeting");
      expect(event).toHaveProperty("is_recurring", true);
      expect(event).toHaveProperty("id");
      expect(typeof event.id).toBe("string");
      if (event.is_recurring) {
        expect(event).toHaveProperty("exceptions");
        expect(event.exceptions).toEqual([]);
        expect(event).toHaveProperty("rrule");
        expect(event.rrule).toHaveProperty("freq", 2);
      }
    });

    test("should create valid all-day recurring event", () => {
      const input = toUnvalidatedEvent({
        calendar_id: "cal-123",
        title: "Daily Standup",
        start: "2024-06-26T09:00:00Z",
        end: "2024-06-26T09:30:00Z",
        is_recurring: true,
        is_all_day: true,
        rrule: {
          freq: 3, // Daily
          until: "2024-12-31T23:59:59Z",
        },
      });

      const result = createEventWorkflow()(input);

      expect(result.isOk()).toBe(true);
      const event = result._unsafeUnwrap();
      expect(event).toHaveProperty("kind", "created");
      expect(event).toHaveProperty("is_all_day", true);
      expect(event).toHaveProperty("is_recurring", true);
    });

    test("should reject recurring event without rrule", () => {
      const input = toUnvalidatedEvent({
        calendar_id: "cal-123",
        title: "Invalid Recurring Event",
        start: "2024-06-26T10:00:00Z",
        end: "2024-06-26T11:00:00Z",
        is_recurring: true,
        is_all_day: false,
      });

      const result = createEventWorkflow()(input);

      expect(result.isErr()).toBe(true);
      const error = result._unsafeUnwrapErr();
      expect(error).toBeInstanceOf(ValidationError);
      expect(error.errors).toContain("MissingRRule");
    });

    test("should reject recurring event with invalid rrule frequency", () => {
      const input = toUnvalidatedEvent({
        calendar_id: "cal-123",
        title: "Invalid Frequency Event",
        start: "2024-06-26T10:00:00Z",
        end: "2024-06-26T11:00:00Z",
        is_recurring: true,
        is_all_day: false,
        rrule: {
          freq: 999, // Invalid frequency
          until: "2024-12-31T23:59:59Z",
        },
      });

      const result = createEventWorkflow()(input);

      expect(result.isErr()).toBe(true);
      const error = result._unsafeUnwrapErr();
      expect(error).toBeInstanceOf(ValidationError);
    });

    test("should reject recurring event with invalid until date", () => {
      const input = toUnvalidatedEvent({
        calendar_id: "cal-123",
        title: "Invalid Until Event",
        start: "2024-06-26T10:00:00Z",
        end: "2024-06-26T11:00:00Z",
        is_recurring: true,
        is_all_day: false,
        rrule: {
          freq: 2,
          until: "invalid-date",
        },
      });

      const result = createEventWorkflow()(input);

      expect(result.isErr()).toBe(true);
      const error = result._unsafeUnwrapErr();
      expect(error).toBeInstanceOf(ValidationError);
    });
  });

  describe("edge cases", () => {
    test("should handle multiple validation errors", () => {
      const input = toUnvalidatedEvent({
        calendar_id: "",
        title: "",
        start: "invalid-start",
        end: "invalid-end",
        is_recurring: false,
        is_all_day: false,
      });

      const result = createEventWorkflow()(input);

      expect(result.isErr()).toBe(true);
      const error = result._unsafeUnwrapErr();
      expect(error).toBeInstanceOf(ValidationError);
      expect(error.errors.length).toBeGreaterThan(1);
    });

    test("should handle complex recurring event scenario", () => {
      const input = toUnvalidatedEvent({
        calendar_id: "cal-project-123",
        title: "Monthly Project Review",
        start: "2024-01-15T14:00:00Z",
        end: "2024-01-15T16:00:00Z",
        is_recurring: true,
        is_all_day: false,
        rrule: {
          freq: 1, // Monthly
          until: "2024-12-15T16:00:00Z",
        },
      });

      const result = createEventWorkflow()(input);

      expect(result.isOk()).toBe(true);
      const event = result._unsafeUnwrap();
      expect(event).toHaveProperty("kind", "created");
      expect(event).toHaveProperty("title", "Monthly Project Review");
      expect(event).toHaveProperty("is_recurring", true);
      if (event.is_recurring) {
        expect(event).toHaveProperty("rrule");
        expect(event.rrule).toHaveProperty("freq", 1);
      }
    });
  });

  describe("toUnvalidatedEvent helper", () => {
    test("should create unvalidated event with kind property", () => {
      const input = {
        calendar_id: "cal-123",
        title: "Test Event",
        start: "2024-06-26T10:00:00Z",
        end: "2024-06-26T11:00:00Z",
        is_recurring: false,
        is_all_day: false,
      };

      const unvalidatedEvent = toUnvalidatedEvent(input);

      expect(unvalidatedEvent).toHaveProperty("kind", "unvalidated");
      expect(unvalidatedEvent).toHaveProperty("calendar_id", "cal-123");
      expect(unvalidatedEvent).toHaveProperty("title", "Test Event");
      expect(unvalidatedEvent).toHaveProperty("start", "2024-06-26T10:00:00Z");
      expect(unvalidatedEvent).toHaveProperty("end", "2024-06-26T11:00:00Z");
      expect(unvalidatedEvent).toHaveProperty("is_recurring", false);
      expect(unvalidatedEvent).toHaveProperty("is_all_day", false);
    });

    test("should create unvalidated recurring event with rrule", () => {
      const input = {
        calendar_id: "cal-123",
        title: "Recurring Event",
        start: "2024-06-26T10:00:00Z",
        end: "2024-06-26T11:00:00Z",
        is_recurring: true,
        is_all_day: false,
        rrule: {
          freq: 2,
          until: "2024-12-31T23:59:59Z",
        },
      };

      const unvalidatedEvent = toUnvalidatedEvent(input);

      expect(unvalidatedEvent).toHaveProperty("kind", "unvalidated");
      expect(unvalidatedEvent).toHaveProperty("is_recurring", true);
      expect(unvalidatedEvent).toHaveProperty("rrule");
      expect(unvalidatedEvent.rrule).toEqual({
        freq: 2,
        until: "2024-12-31T23:59:59Z",
      });
    });
  });
});
